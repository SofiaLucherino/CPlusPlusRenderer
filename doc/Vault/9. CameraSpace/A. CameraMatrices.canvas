{
	"nodes":[
		{"id":"ba4b0893192ab5bd","type":"text","text":"Ми хочемо мати змогу дивитися на наш світ з різних ракурсів камери:\n- для цього напишемо код що буде відмальовувати світ з урахуванням положення і нахилу камери","x":-680,"y":-360,"width":583,"height":110,"color":"#ff0066"},
		{"id":"fc4408d2024d7bd5","type":"text","text":"Так як ми не хочемо переписувати функцію проектування, то залишимо камеру у початку координат, і просто будемо повертати і зміщувати усі об'єкти світу.\n\nДля контролю будемо використовувати мишку і клавіатуру, а поточні значення закодуємо у вигляді триввимірного вектору позиції камери і двох значень що вказують на радіани нахилу відносно осей Χ і Υ.","x":-680,"y":-220,"width":655,"height":167,"color":"#ff0095"},
		{"id":"1db43724a4531c9f","type":"text","text":"Матриця камери:\n- нашу матрицю ми будемо утворювати з:\n\t- матриці зміщенні відносно початку координат\n\t- матриць повороту тангажу і рискання для осей Х і Y відповідно\n- Матриця зміщення:\n\t- матриця зміщення буде виглядати майже так само як і такаж коли ми просто рухаємо об'єкт у світі\n\t- проте замість того щоб використовувати значення зміни ікса як два, ми будемо використовувати значення мінус два, так як при зміщенні камери вліво на дві одиниці усі об'єкти відносно неї зміщуються вправо на дві одиниці\n- Матриці повороту:\n\t- З матрицями повороту буде складніше\n\t- Ми будемо використовувати одиничну матрицю, яку будемо множити на матриці повороту відносно осі Х а потім осі Y\n\t- Таким чином ми отримаємо матрицю в якій закодований новий базис камери, проте як нам використату таку матрицю, щоб всі об'єкти в світі були спроетовані під цим базисом\n\t\t- Для цього ми будемо множити координати світу на обернену матрицю поточного базису\n\t\t- Але писати окрему функцію для знаходження оберненої матриці ми не хочемо, так як алгоритм буде сильно навантажувати систему, до того ж в нас є кращий варіант\n\t\t- Будемо використвовувати транспоновану матрицю, так як для матриці нормалізованного базису вона буде як раз оберненою (довести це ви можете самостійно, в якості підсказки використовуйте джерело [з потрібною лекцією](https://github.com/UkrKnowledge/GraphicsTutorial/blob/main/docs) де вже розписаний доказ для нормованої матриці 2х2)","x":-680,"y":-20,"width":782,"height":723,"color":"#ff00c8"}
	],
	"edges":[]
}