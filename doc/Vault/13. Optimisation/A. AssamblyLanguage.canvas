{
	"nodes":[
		{"id":"7333083cad0d6b2d","type":"text","text":"Мова ассемблера\n- мова програмування яка прив'язана до кокретної архітектури Центрального Процессора\n\nМова складається з:\n- найпростіших інструкцій\n- регістрів процессора в які можна завантажувати і зчитувати данні\n\nКожна інструкція як і функції має аргументи\n\nУсього існує від 16 до 64 регістрів в залежності від процессора\nРегістри мають однаковий обсяг пам'яті але можуть інтерпретуватися як регістри з половиною пам'яті від тої що була або ще меншою\nРегістри зберігають значення без типів, інтерпретувати ці значення правильно може тілько розробник коду","x":-600,"y":-180,"width":496,"height":499,"color":"#ff006f"},
		{"id":"cac73a9d648aef3c","type":"text","text":"Регістри:\n- У архітектурі х86-64 існує 16 регістрів\n- також кожний з цих 64-бітних регістрів можна інтерпретувати як 32-бітний, і для нього будуть проводитися відповідні 32-бітні операції\n\nАле що робити якщо регістри закінчуться?\n\nСтек викликів:\n- це спеціальне місце в пам'яті що программа інтерпретує як стек з вказівниками на функції і значення змінних в просторі цих функцій що не помістилися в регістри\n- коли ми хочемо зробити операцію й записати її результат нам потрібний один вільний регістр, тому якщо ми хочемо мати більше 15 змінних одразу і виконувати операції ми можемо просто записати значення змінних в стек виклику і зчитувати звідти","x":-60,"y":-180,"width":748,"height":390,"color":"#ff0095"},
		{"id":"12678bfe06b65e44","type":"text","text":"Так як стек викликів знаходиться в пам'яті то доступ до нього дуже повільний в порівнянні з регістрами процессора","x":-60,"y":256,"width":513,"height":63,"color":"1"}
	],
	"edges":[]
}